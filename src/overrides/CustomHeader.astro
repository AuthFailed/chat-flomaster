---
import config from 'virtual:starlight/user-config';
import type {Props} from '@astrojs/starlight/props';
import LanguageSelect from 'virtual:starlight/components/LanguageSelect';
import Search from 'virtual:starlight/components/Search';
import SiteTitle from 'virtual:starlight/components/SiteTitle';
import SocialIcons from 'virtual:starlight/components/SocialIcons';
import ThemeSelect from 'virtual:starlight/components/ThemeSelect';

const shouldRenderSearch =
    config.pagefind || config.components.Search !== '@astrojs/starlight/components/Search.astro';
---

<div class="header sl-flex">
    <div class="title-wrapper sl-flex">
        <SiteTitle {...Astro.props}/>
    </div>
    <div class="sl-flex">
        {shouldRenderSearch &&
                <Search {...Astro.props}/>}
    </div>
    <div class="sl-hidden md:sl-flex right-group">
        <div class="sl-flex social-icons">
            <SocialIcons {...Astro.props}/>
        </div>
        <ThemeSelect {...Astro.props}/>
        <LanguageSelect {...Astro.props}/>
    </div>
</div>

<script>
    function copyLinkToClipboard(id, button) {
        const url = new URL(window.location);
        const decodedHeaderID = decodeURIComponent(id)
        const decoded_url = decodeURIComponent(url)

        navigator.clipboard.writeText(`${decoded_url}#${decodedHeaderID}`).then(() => {
            button.textContent = 'âœ“';
            button.classList.add('text-green-500');
            setTimeout(() => {
                button.textContent = 'ðŸ”—';
                button.classList.remove('text-green-500');
            }, 1000);
        }).catch(err => {
            console.error('Failed to copy: ', err);
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Target only the main content area, excluding the header
        const mainContent = document.querySelector('main');
        if (!mainContent) return;

        mainContent.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]').forEach((heading) => {
            if (heading.id === '_top') return; // Skip headers with id "_top"

            const button = document.createElement('button');
            button.textContent = 'ðŸ”—';
            button.className = 'header-link-button text-xs focus:outline-none transition-all duration-300 ease-in-out ml-2';
            button.style.opacity = '0';
            button.style.transform = 'translateX(5px)';
            button.setAttribute('aria-label', 'Copy link to section');
            button.onclick = (e) => {
                e.preventDefault();
                copyLinkToClipboard(heading.id, button);
            };

            // Create a wrapper span for the header content
            const wrapper = document.createElement('span');
            wrapper.className = 'header-content-wrapper flex items-center';

            // Move the header's content into the wrapper
            while (heading.firstChild) {
                wrapper.appendChild(heading.firstChild);
            }

            // Append the button to the wrapper
            wrapper.appendChild(button);

            // Add the wrapper back to the heading
            heading.appendChild(wrapper);

            heading.addEventListener('mouseenter', () => {
                button.style.opacity = '1';
                button.style.transition = 'opacity 0.3s ease';
            });

            heading.addEventListener('mouseleave', () => {
                button.style.opacity = '0';
                button.style.transition = 'opacity 0.3s ease';
            });
        });
    });
</script>

<style>
    .header {
        gap: var(--sl-nav-gap);
        justify-content: space-between;
        align-items: center;
        height: 100%;
    }

    .title-wrapper {
        overflow: hidden;
    }

    .right-group,
    .social-icons {
        gap: 1rem;
        align-items: center;
    }

    .social-icons::after {
        content: '';
        height: 2rem;
        border-inline-end: 1px solid var(--sl-color-gray-5);
    }

    .header-link-button {
        transition: opacity 0.3s ease, transform 0.3s ease;
    }

    .header-content-wrapper {
        width: 100%;
        display: flex;
        align-items: center;
    }

    @media (min-width: 50rem) {
        :global(:root[data-has-sidebar]) {
            --__sidebar-pad: calc(2 * var(--sl-nav-pad-x));
        }

        :global(:root:not([data-has-toc])) {
            --__toc-width: 0rem;
        }

        .header {
            --__sidebar-width: max(0rem, var(--sl-content-inline-start, 0rem) - var(--sl-nav-pad-x));
            --__main-column-fr: calc(
                    (100% + var(--__sidebar-pad, 0rem) - var(--__toc-width, var(--sl-sidebar-width)) -
                    (2 * var(--__toc-width, var(--sl-nav-pad-x))) - var(--sl-content-inline-start, 0rem) -
                    var(--sl-content-width)) / 2
            );
            display: grid;
            grid-template-columns:
				minmax(
					calc(var(--__sidebar-width) + max(0rem, var(--__main-column-fr) - var(--sl-nav-gap))),
                    auto
				)
				1fr
				auto;
            align-content: center;
        }
    }
</style>